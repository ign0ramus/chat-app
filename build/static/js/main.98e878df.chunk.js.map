{"version":3,"sources":["components/LoginForm.js","components/Chat/Sidebar.js","components/Chat/Messages/Message/Message.js","components/Chat/Messages/Messages.js","components/Chat/Chat.js","containers/Layout.js","containers/App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","setUser","error","user","alert","react_default","a","createElement","className","onSubmit","event","preventDefault","params","name","target","querySelector","value","room","window","location","hash","slice","socket","emit","htmlFor","type","id","placeholder","required","autoFocus","Sidebar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","users","_this2","on","setState","map","key","uniqid","Component","message","time","text","Messages","scrollToBottom","messages","document","getElementById","newMessage","lastElementChild","lastMessage","previousElementSibling","messagesHeight","clientHeight","messagesScrollTop","scrollTop","messagesScrollHeight","scrollHeight","moment","format","push","Message","chat","Sidebar_Sidebar","Messages_Messages","input","socketUrl","Layout","initSocket","io","Chat","components_LoginForm","App","Layout_Layout","Boolean","hostname","match","ReactDOM","render","src_containers_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98e878df.chunk.js","sourcesContent":["import React from 'react';\n\nconst LoginForm = (props) => {\n\n    const setUser = (error, user) => {\n        if (error) {\n            alert(error);\n        } else {\n            props.setUser(user);\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const name = event.target.querySelector('input').value;\n        /* Если room не пустая, значит пользователь должен присоединиться к комнате указанной в ссылке, иначе к новому чату */\n        const room = window.location.hash.slice(1);\n        const params = {name, room}\n\n        const { socket } = props;\n        socket.emit('VERIFY_USER', params, setUser);\n    };\n\n    return (\n        <div className=\"container\">\n            <form className=\"form\" onSubmit={handleSubmit}>\n                <div className=\"form__field\">\n                    <h3 className=\"heading-3\">Join Chat</h3>\n                </div>\n            <div className=\"form__field\">\n                <label className=\"form__label\" htmlFor=\"nickname\">Nickname</label>\n                <input\n                    className=\"form__input\"\n                    type=\"text\" \n                    id=\"nickname\" \n                    placeholder=\"Enter your nickname\"\n                    required\n                    autoFocus />\n            </div>\n            <div className=\"form__field\">\n                <button className=\"form__button button\">Join</button>\n            </div>\n            </form>\n        </div>\n    );\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\nimport uniqid from 'uniqid';\n\nexport default class Sidebar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            users: []\n        }\n    }\n\n    componentDidMount() {\n        const { socket } = this.props;\n\n        socket.on('UPDATE_USERS_LIST', users => {\n            this.setState({ users });\n        });\n    }\n\n    render() {\n\n        const users = this.state.users.map(user => {\n            return <li className=\"users__user\" key={uniqid()}>{user}</li>;\n        });\n\n        return (\n            <div className=\"sidebar\">\n                <input id=\"users-online\" type=\"checkbox\" className=\"sidebar__checkbox\" />\n                <label className=\"sidebar__header\" htmlFor=\"users-online\">Users online</label>\n                <div className=\"sidebar__users users\">\n                    <ul className=\"users__list\">{users}</ul> \n                </div>\n            </div>\n        );\n    }\n};","import React from 'react';\n\nconst message = (props) => {\n\n    return (\n        <li className=\"chat__message\">\n            <div className=\"chat__message-title\">\n                <h4 className=\"heading-4\">{props.name}</h4>\n                <span className=\"span--dark\">{props.time}</span>\n            </div>\n            <div className=\"chat__message-body\">\n                <p className=\"text\">{props.text}</p>\n            </div>\n        </li>\n    );\n};\n\nexport default message;","import React, { Component } from 'react'\nimport moment from 'moment';\nimport uniqid from 'uniqid';\n\nimport Message from './Message/Message';\n\nexport default class Messages extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messages: []\n        }\n    }\n\n    componentWillMount() {\n        const { socket } = this.props;\n\n        socket.on('NEW_MESSAGE', message => {\n            message.time = moment(message.time).format('HH:mm');\n            const messages = this.state.messages.slice();\n            messages.push(message);\n\n            this.setState({ messages });\n            this.scrollToBottom();\n        })\n    }\n\n    scrollToBottom = () => {\n        // прокручивает контейнер сообщений вниз, если новое сообщение видно на экране\n\n        // селекторы\n        const messages = document.getElementById('msgs');\n        const newMessage = messages.lastElementChild;\n        const lastMessage = newMessage.previousElementSibling;\n        // высоты\n        const messagesHeight = messages.clientHeight;\n        const messagesScrollTop = messages.scrollTop;\n        const messagesScrollHeight = messages.scrollHeight;\n    \n        const newMessageHeight = newMessage.clientHeight;\n        const lastMessageHeight = lastMessage ? lastMessage.clientHeight : 0;\n\n        if (messagesHeight + messagesScrollTop + newMessageHeight + lastMessageHeight >= messagesScrollHeight) {\n            messages.scrollTop = messagesScrollHeight;\n        }\n    };\n\n    render() {\n        const messages = this.state.messages.map(message => {\n            return (<Message\n                            name={message.name || ''}\n                            time={message.time}\n                            text={message.text}\n                            key={uniqid()} />)\n        });\n        return (\n            <ol \n                className=\"chat__messages\"\n                id=\"msgs\">\n                {messages}\n            </ol>\n        )\n    }\n}\n","import React from 'react';\n\nimport Sidebar from './Sidebar';\nimport Messages from './Messages/Messages';\n\nconst chat = (props) => {\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        const input = event.target.querySelector('input');\n        const text = input.value;\n        const { socket } = props;\n\n        socket.emit('CREATE_MESSAGE', text, () => {\n            input.value = '';\n        });\n    };\n    \n        const { user, socket } = props;\n        // меняет хэш на номер комнаты, чтобы было возможно пригласить пользователей в данную комнату\n        window.location.hash = user.room;\n    \n        return (\n            <div className=\"container\">\n                <Sidebar \n                        socket={socket}\n                        user={user} />\n                <div className=\"chat\">\n                    <Messages\n                            socket={socket}/>\n                    <div className=\"chat__footer\">\n                        <form className=\"chat__form\" onSubmit={submitHandler}>\n                            <input\n                                className=\"chat__input\"\n                                type=\"text\" \n                                placeholder=\"Message\" \n                                autoFocus />\n                            <button className=\"chat__button button\">Send</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n}\n\nexport default chat;\n","import React, { Component } from 'react'\nimport io from 'socket.io-client';\n\nimport LoginForm from '../components/LoginForm';\nimport Chat from '../components/Chat/Chat';\n\nconst socketUrl = '/';\n\nexport default class Layout extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            socket: null,\n            user: null\n        };\n    }\n\n    componentWillMount() {\n        this.initSocket();\n    }\n\n    // подключает сокет\n    initSocket = () => {\n        /* без опции {transports: ['websocket']} chrome блокирует http запрос \n        из-за CORS Policy при использовании devServer и socket.io */\n        const socket = io(socketUrl);\n\n        this.setState({ socket });\n    };\n\n    /** Устанавливает свойства пользователя в state\n    * @param {object} user {id: number, name: string, room: string}\n    */\n    setUser = (user) => {\n        const { socket } = this.state;\n        socket.emit('USER_CONNECTED', user)\n        this.setState({ user });\n    };\n\n    render() {\n        let content;\n        if (!this.state.user) {\n            content = <LoginForm \n                                socket={this.state.socket} \n                                setUser={this.setUser} />;\n        } else {\n            content = <Chat\n                            socket={this.state.socket} \n                            user={this.state.user} />;\n            \n        }\n        return content;\n    }\n}\n","import React, { Component } from 'react';\nimport Layout from './Layout';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}